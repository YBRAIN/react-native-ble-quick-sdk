/*
 * SDKServiceMgr.js
 * React Native BLE Easy SDK with autogenerated source
 *
 * The MIT License (MIT)
 *
 * Copyright 2017 Eric S
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

// ---------------------------------
// SDK general Service functions
// ---------------------------------

'use strict'


import DLog from '../common/DLog';
import {DLogCfg} from '../common/DLog';
import { getPayloadParserInstance } from '../protocols/PayloadParser';
import { getDevAdminInstance} from './DevAdmin';
import { getDevServiceMgrInstance} from './DevServiceMgr';
const SDK_CONFIG = require('../sdk_config.json');




var instanceSDKServiceMgr = null;
var nSDKServiceMgrObjCnt = 0;


/**
 * @public
 * This function creates singleton instance of SDK service manager object. This
 * is the main interface object through which all features supported in sdk
 * can be accessed.
 * @param {boolean} bDebugMode  Set it to true/false to enable/disable logging according to development or production release.
 * @returns {Object - SDKServiceMgr} SDK service manager singleton instance.
 */
export function getSDKServiceMgrInstance(bDebugMode)
{
    if(bDebugMode != undefined)
    {
        DLogCfg.DEBUG_MODE = bDebugMode;
    }
    
    DLog.printDebugMsg("entered getSDKServiceMgrInstance, nSDKServiceMgrObjCnt = " + nSDKServiceMgrObjCnt);

    if(nSDKServiceMgrObjCnt > 0 )
    {
        DLog.printDebugMsg("It's a singleton class, returning existing instance of SDKServiceMgr class ");
        return instanceSDKServiceMgr;
    }
    
    nSDKServiceMgrObjCnt++;
    DLog.printDebugMsg("SDKServiceMgr Object Count is " + nSDKServiceMgrObjCnt);
    
    instanceSDKServiceMgr = new SDKServiceMgr();

    return instanceSDKServiceMgr;
}


/**
 * This class provides interface to all the feature supported in this SDK
 * and manages communication channel and vendor protocol to be used.
  * @extends None
 */
class SDKServiceMgr {
    
    
    constructor(){


        
    }

    
    /**
     * This function enables/disables logging feature.
     * @param {boolean} bDebugMode  Set it to true/false to enable/disable logging according to development or production release.
     * @returns none
     */
    setDebugMode(bDebugMode)
    {
        DLogCfg.DEBUG_MODE = bDebugMode;
    }

    /**
     * This function returns SDK version
     * @param none
     * @returns {String} SDK version string.
     */
    getSDKVersion()
    {

        var packageJSON = require('../package.json');
        DLog.printDebugMsg("version is : " + packageJSON.version);
        
        return packageJSON.version;
    }
    
    /**
     * This function creates singleton instance of device admin object. This
     * object creates device admin depnding upon type of communication channel
     * as set during sdk initalization. Currently, it only support comunication 
     * via BLE channel which can be later extended to support BT classic or USB serial etc.
     * @param none
     * @returns {Object - DevAdmin} Singleton instance of device admin object
     */
    getDevAdmin()
    {
        return getDevAdminInstance();
    }
    
    
    /**
     * This function creates singleton instance device service manager object. This
     * is the interface object through which all BLE characteristics of a particular service
     * can be accessed.
     * @param {boolean} bDebugMode  Set it to true/false to enable/disable logging according to development or production release.
     * @returns {Object - DevServiceMgr} SDK service manager singleton instance.
     */
    getDeviceSvcMgr(bDebugMode)
    {
        return getDevServiceMgrInstance(bDebugMode);
    }
    
    
    /**
     * This function creates singleton instance of vendor's implementation of protocol parser object.
     * @param none
     * @returns {Object - PayloadParser} Singleton instance of vendor protocol data payload parser.
     */
    getProtocolParser()
    {
        DLog.printDebugMsg("getProtocolParser ");

        return getPayloadParserInstance();
    }
    
   
}


